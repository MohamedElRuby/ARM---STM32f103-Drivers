
STM32F103_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006c4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007f4  080007fc  000107fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007f4  080007f4  000107fc  2**0
                  CONTENTS
  4 .ARM          00000000  080007f4  080007f4  000107fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007f4  080007fc  000107fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007f4  080007f4  000107f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007f8  080007f8  000107f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  080007fc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080007fc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000107fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010825  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007fd  00000000  00000000  00010868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004a6  00000000  00000000  00011065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00011510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000111  00000000  00000000  000116a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000002f3  00000000  00000000  000117b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c48  00000000  00000000  00011aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004394  00000000  00000000  000126ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000450  00000000  00000000  00016a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00016ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080007dc 	.word	0x080007dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080007dc 	.word	0x080007dc

08000170 <EXTI0_IRQHandler>:

void EXTI0_voidSetCallback( void (*PTR)(void) ){
	CallbackPTR=PTR;
}

void EXTI0_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	if(CallbackPTR != 0){
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <EXTI0_IRQHandler+0x18>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d002      	beq.n	8000182 <EXTI0_IRQHandler+0x12>
		CallbackPTR();
 800017c:	4b02      	ldr	r3, [pc, #8]	; (8000188 <EXTI0_IRQHandler+0x18>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4798      	blx	r3
	}
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	2000001c 	.word	0x2000001c

0800018c <GPIO_voidSetPinDirection>:
#include "RCC_interface.h"
#include "GPIO_private.h"
#include "GPIO_interface.h"


void	GPIO_voidSetPinDirection		(u8 PortId,u8 PinId,u8 Direction){
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
 8000196:	460b      	mov	r3, r1
 8000198:	71bb      	strb	r3, [r7, #6]
 800019a:	4613      	mov	r3, r2
 800019c:	717b      	strb	r3, [r7, #5]
	if(PortId<3 && PinId<16){
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	f200 80af 	bhi.w	8000304 <GPIO_voidSetPinDirection+0x178>
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	f200 80ab 	bhi.w	8000304 <GPIO_voidSetPinDirection+0x178>
		if(PinId<8){
 80001ae:	79bb      	ldrb	r3, [r7, #6]
 80001b0:	2b07      	cmp	r3, #7
 80001b2:	d852      	bhi.n	800025a <GPIO_voidSetPinDirection+0xce>
			switch(PortId){
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	2b02      	cmp	r3, #2
 80001b8:	d037      	beq.n	800022a <GPIO_voidSetPinDirection+0x9e>
 80001ba:	2b02      	cmp	r3, #2
 80001bc:	f300 80a2 	bgt.w	8000304 <GPIO_voidSetPinDirection+0x178>
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d002      	beq.n	80001ca <GPIO_voidSetPinDirection+0x3e>
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d018      	beq.n	80001fa <GPIO_voidSetPinDirection+0x6e>
				break;
			}
		}

	}
}
 80001c8:	e09c      	b.n	8000304 <GPIO_voidSetPinDirection+0x178>
				GPIOA_CRL &= ~((0b1111)<<(PinId*4));
 80001ca:	4b51      	ldr	r3, [pc, #324]	; (8000310 <GPIO_voidSetPinDirection+0x184>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	79ba      	ldrb	r2, [r7, #6]
 80001d0:	0092      	lsls	r2, r2, #2
 80001d2:	210f      	movs	r1, #15
 80001d4:	fa01 f202 	lsl.w	r2, r1, r2
 80001d8:	43d2      	mvns	r2, r2
 80001da:	4611      	mov	r1, r2
 80001dc:	4a4c      	ldr	r2, [pc, #304]	; (8000310 <GPIO_voidSetPinDirection+0x184>)
 80001de:	400b      	ands	r3, r1
 80001e0:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |= ((Direction)<<(PinId*4));
 80001e2:	4b4b      	ldr	r3, [pc, #300]	; (8000310 <GPIO_voidSetPinDirection+0x184>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	7979      	ldrb	r1, [r7, #5]
 80001e8:	79ba      	ldrb	r2, [r7, #6]
 80001ea:	0092      	lsls	r2, r2, #2
 80001ec:	fa01 f202 	lsl.w	r2, r1, r2
 80001f0:	4611      	mov	r1, r2
 80001f2:	4a47      	ldr	r2, [pc, #284]	; (8000310 <GPIO_voidSetPinDirection+0x184>)
 80001f4:	430b      	orrs	r3, r1
 80001f6:	6013      	str	r3, [r2, #0]
				break;
 80001f8:	e084      	b.n	8000304 <GPIO_voidSetPinDirection+0x178>
				GPIOB_CRL &= ~((0b1111)<<(PinId*4));
 80001fa:	4b46      	ldr	r3, [pc, #280]	; (8000314 <GPIO_voidSetPinDirection+0x188>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	79ba      	ldrb	r2, [r7, #6]
 8000200:	0092      	lsls	r2, r2, #2
 8000202:	210f      	movs	r1, #15
 8000204:	fa01 f202 	lsl.w	r2, r1, r2
 8000208:	43d2      	mvns	r2, r2
 800020a:	4611      	mov	r1, r2
 800020c:	4a41      	ldr	r2, [pc, #260]	; (8000314 <GPIO_voidSetPinDirection+0x188>)
 800020e:	400b      	ands	r3, r1
 8000210:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |= ((Direction)<<(PinId*4));
 8000212:	4b40      	ldr	r3, [pc, #256]	; (8000314 <GPIO_voidSetPinDirection+0x188>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	7979      	ldrb	r1, [r7, #5]
 8000218:	79ba      	ldrb	r2, [r7, #6]
 800021a:	0092      	lsls	r2, r2, #2
 800021c:	fa01 f202 	lsl.w	r2, r1, r2
 8000220:	4611      	mov	r1, r2
 8000222:	4a3c      	ldr	r2, [pc, #240]	; (8000314 <GPIO_voidSetPinDirection+0x188>)
 8000224:	430b      	orrs	r3, r1
 8000226:	6013      	str	r3, [r2, #0]
				break;
 8000228:	e06c      	b.n	8000304 <GPIO_voidSetPinDirection+0x178>
				GPIOC_CRL &= ~((0b1111)<<(PinId*4));
 800022a:	4b3b      	ldr	r3, [pc, #236]	; (8000318 <GPIO_voidSetPinDirection+0x18c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	79ba      	ldrb	r2, [r7, #6]
 8000230:	0092      	lsls	r2, r2, #2
 8000232:	210f      	movs	r1, #15
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	43d2      	mvns	r2, r2
 800023a:	4611      	mov	r1, r2
 800023c:	4a36      	ldr	r2, [pc, #216]	; (8000318 <GPIO_voidSetPinDirection+0x18c>)
 800023e:	400b      	ands	r3, r1
 8000240:	6013      	str	r3, [r2, #0]
				GPIOC_CRL |= ((Direction)<<(PinId*4));
 8000242:	4b35      	ldr	r3, [pc, #212]	; (8000318 <GPIO_voidSetPinDirection+0x18c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	7979      	ldrb	r1, [r7, #5]
 8000248:	79ba      	ldrb	r2, [r7, #6]
 800024a:	0092      	lsls	r2, r2, #2
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	4611      	mov	r1, r2
 8000252:	4a31      	ldr	r2, [pc, #196]	; (8000318 <GPIO_voidSetPinDirection+0x18c>)
 8000254:	430b      	orrs	r3, r1
 8000256:	6013      	str	r3, [r2, #0]
				break;
 8000258:	e054      	b.n	8000304 <GPIO_voidSetPinDirection+0x178>
		}else if(PinId>8){
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	2b08      	cmp	r3, #8
 800025e:	d951      	bls.n	8000304 <GPIO_voidSetPinDirection+0x178>
			switch(PortId){
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b02      	cmp	r3, #2
 8000264:	d036      	beq.n	80002d4 <GPIO_voidSetPinDirection+0x148>
 8000266:	2b02      	cmp	r3, #2
 8000268:	dc4c      	bgt.n	8000304 <GPIO_voidSetPinDirection+0x178>
 800026a:	2b00      	cmp	r3, #0
 800026c:	d002      	beq.n	8000274 <GPIO_voidSetPinDirection+0xe8>
 800026e:	2b01      	cmp	r3, #1
 8000270:	d018      	beq.n	80002a4 <GPIO_voidSetPinDirection+0x118>
}
 8000272:	e047      	b.n	8000304 <GPIO_voidSetPinDirection+0x178>
				GPIOA_CRH &= ~((0b1111)<<(PinId*4));
 8000274:	4b29      	ldr	r3, [pc, #164]	; (800031c <GPIO_voidSetPinDirection+0x190>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	79ba      	ldrb	r2, [r7, #6]
 800027a:	0092      	lsls	r2, r2, #2
 800027c:	210f      	movs	r1, #15
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	43d2      	mvns	r2, r2
 8000284:	4611      	mov	r1, r2
 8000286:	4a25      	ldr	r2, [pc, #148]	; (800031c <GPIO_voidSetPinDirection+0x190>)
 8000288:	400b      	ands	r3, r1
 800028a:	6013      	str	r3, [r2, #0]
				GPIOA_CRH |= ((Direction)<<(PinId*4));
 800028c:	4b23      	ldr	r3, [pc, #140]	; (800031c <GPIO_voidSetPinDirection+0x190>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	7979      	ldrb	r1, [r7, #5]
 8000292:	79ba      	ldrb	r2, [r7, #6]
 8000294:	0092      	lsls	r2, r2, #2
 8000296:	fa01 f202 	lsl.w	r2, r1, r2
 800029a:	4611      	mov	r1, r2
 800029c:	4a1f      	ldr	r2, [pc, #124]	; (800031c <GPIO_voidSetPinDirection+0x190>)
 800029e:	430b      	orrs	r3, r1
 80002a0:	6013      	str	r3, [r2, #0]
				break;
 80002a2:	e02f      	b.n	8000304 <GPIO_voidSetPinDirection+0x178>
				GPIOB_CRH &= ~((0b1111)<<(PinId*4));
 80002a4:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <GPIO_voidSetPinDirection+0x194>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	79ba      	ldrb	r2, [r7, #6]
 80002aa:	0092      	lsls	r2, r2, #2
 80002ac:	210f      	movs	r1, #15
 80002ae:	fa01 f202 	lsl.w	r2, r1, r2
 80002b2:	43d2      	mvns	r2, r2
 80002b4:	4611      	mov	r1, r2
 80002b6:	4a1a      	ldr	r2, [pc, #104]	; (8000320 <GPIO_voidSetPinDirection+0x194>)
 80002b8:	400b      	ands	r3, r1
 80002ba:	6013      	str	r3, [r2, #0]
				GPIOB_CRH |= ((Direction)<<(PinId*4));
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <GPIO_voidSetPinDirection+0x194>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	7979      	ldrb	r1, [r7, #5]
 80002c2:	79ba      	ldrb	r2, [r7, #6]
 80002c4:	0092      	lsls	r2, r2, #2
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	4611      	mov	r1, r2
 80002cc:	4a14      	ldr	r2, [pc, #80]	; (8000320 <GPIO_voidSetPinDirection+0x194>)
 80002ce:	430b      	orrs	r3, r1
 80002d0:	6013      	str	r3, [r2, #0]
				break;
 80002d2:	e017      	b.n	8000304 <GPIO_voidSetPinDirection+0x178>
				GPIOC_CRH &= ~((0b1111)<<(PinId*4));
 80002d4:	4b13      	ldr	r3, [pc, #76]	; (8000324 <GPIO_voidSetPinDirection+0x198>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	79ba      	ldrb	r2, [r7, #6]
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	210f      	movs	r1, #15
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	43d2      	mvns	r2, r2
 80002e4:	4611      	mov	r1, r2
 80002e6:	4a0f      	ldr	r2, [pc, #60]	; (8000324 <GPIO_voidSetPinDirection+0x198>)
 80002e8:	400b      	ands	r3, r1
 80002ea:	6013      	str	r3, [r2, #0]
				GPIOC_CRH |= ((Direction)<<(PinId*4));
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <GPIO_voidSetPinDirection+0x198>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	7979      	ldrb	r1, [r7, #5]
 80002f2:	79ba      	ldrb	r2, [r7, #6]
 80002f4:	0092      	lsls	r2, r2, #2
 80002f6:	fa01 f202 	lsl.w	r2, r1, r2
 80002fa:	4611      	mov	r1, r2
 80002fc:	4a09      	ldr	r2, [pc, #36]	; (8000324 <GPIO_voidSetPinDirection+0x198>)
 80002fe:	430b      	orrs	r3, r1
 8000300:	6013      	str	r3, [r2, #0]
				break;
 8000302:	bf00      	nop
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40010800 	.word	0x40010800
 8000314:	40010c00 	.word	0x40010c00
 8000318:	40011000 	.word	0x40011000
 800031c:	40010804 	.word	0x40010804
 8000320:	40010c04 	.word	0x40010c04
 8000324:	40011004 	.word	0x40011004

08000328 <GPIO_voidSetPinValue>:


void	GPIO_voidSetPinValue			(u8 PortId,u8 PinId,u8 Value){
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	460b      	mov	r3, r1
 8000334:	71bb      	strb	r3, [r7, #6]
 8000336:	4613      	mov	r3, r2
 8000338:	717b      	strb	r3, [r7, #5]
	if(PortId<3 && PinId<16){
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b02      	cmp	r3, #2
 800033e:	d864      	bhi.n	800040a <GPIO_voidSetPinValue+0xe2>
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	2b0f      	cmp	r3, #15
 8000344:	d861      	bhi.n	800040a <GPIO_voidSetPinValue+0xe2>
		 if(Value==GPIO_HIGH){
 8000346:	797b      	ldrb	r3, [r7, #5]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d12a      	bne.n	80003a2 <GPIO_voidSetPinValue+0x7a>
			switch(PortId){
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d01c      	beq.n	800038c <GPIO_voidSetPinValue+0x64>
 8000352:	2b02      	cmp	r3, #2
 8000354:	dc56      	bgt.n	8000404 <GPIO_voidSetPinValue+0xdc>
 8000356:	2b00      	cmp	r3, #0
 8000358:	d002      	beq.n	8000360 <GPIO_voidSetPinValue+0x38>
 800035a:	2b01      	cmp	r3, #1
 800035c:	d00b      	beq.n	8000376 <GPIO_voidSetPinValue+0x4e>
	        case PORTA:SET_BIT(GPIOA_ODR,PinId);break;
	        case PORTB:SET_BIT(GPIOB_ODR,PinId);break;
	        case PORTC:SET_BIT(GPIOC_ODR,PinId);break;
	        default: break;
 800035e:	e051      	b.n	8000404 <GPIO_voidSetPinValue+0xdc>
	        case PORTA:SET_BIT(GPIOA_ODR,PinId);break;
 8000360:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <GPIO_voidSetPinValue+0xec>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	79ba      	ldrb	r2, [r7, #6]
 8000366:	2101      	movs	r1, #1
 8000368:	fa01 f202 	lsl.w	r2, r1, r2
 800036c:	4611      	mov	r1, r2
 800036e:	4a29      	ldr	r2, [pc, #164]	; (8000414 <GPIO_voidSetPinValue+0xec>)
 8000370:	430b      	orrs	r3, r1
 8000372:	6013      	str	r3, [r2, #0]
 8000374:	e049      	b.n	800040a <GPIO_voidSetPinValue+0xe2>
	        case PORTB:SET_BIT(GPIOB_ODR,PinId);break;
 8000376:	4b28      	ldr	r3, [pc, #160]	; (8000418 <GPIO_voidSetPinValue+0xf0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	79ba      	ldrb	r2, [r7, #6]
 800037c:	2101      	movs	r1, #1
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	4611      	mov	r1, r2
 8000384:	4a24      	ldr	r2, [pc, #144]	; (8000418 <GPIO_voidSetPinValue+0xf0>)
 8000386:	430b      	orrs	r3, r1
 8000388:	6013      	str	r3, [r2, #0]
 800038a:	e03e      	b.n	800040a <GPIO_voidSetPinValue+0xe2>
	        case PORTC:SET_BIT(GPIOC_ODR,PinId);break;
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <GPIO_voidSetPinValue+0xf4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	79ba      	ldrb	r2, [r7, #6]
 8000392:	2101      	movs	r1, #1
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a20      	ldr	r2, [pc, #128]	; (800041c <GPIO_voidSetPinValue+0xf4>)
 800039c:	430b      	orrs	r3, r1
 800039e:	6013      	str	r3, [r2, #0]
 80003a0:	e033      	b.n	800040a <GPIO_voidSetPinValue+0xe2>
			}
		}
		    else if(Value==GPIO_LOW){
 80003a2:	797b      	ldrb	r3, [r7, #5]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d130      	bne.n	800040a <GPIO_voidSetPinValue+0xe2>
           	switch(PortId){
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	d01e      	beq.n	80003ec <GPIO_voidSetPinValue+0xc4>
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	dc2a      	bgt.n	8000408 <GPIO_voidSetPinValue+0xe0>
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d002      	beq.n	80003bc <GPIO_voidSetPinValue+0x94>
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d00c      	beq.n	80003d4 <GPIO_voidSetPinValue+0xac>
            case PORTA: CLR_BIT(GPIOA_ODR,PinId); break;
            case PORTB: CLR_BIT(GPIOB_ODR,PinId); break;
            case PORTC: CLR_BIT(GPIOC_ODR,PinId); break;
            default: break;
 80003ba:	e025      	b.n	8000408 <GPIO_voidSetPinValue+0xe0>
            case PORTA: CLR_BIT(GPIOA_ODR,PinId); break;
 80003bc:	4b15      	ldr	r3, [pc, #84]	; (8000414 <GPIO_voidSetPinValue+0xec>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	79ba      	ldrb	r2, [r7, #6]
 80003c2:	2101      	movs	r1, #1
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a11      	ldr	r2, [pc, #68]	; (8000414 <GPIO_voidSetPinValue+0xec>)
 80003ce:	400b      	ands	r3, r1
 80003d0:	6013      	str	r3, [r2, #0]
 80003d2:	e01a      	b.n	800040a <GPIO_voidSetPinValue+0xe2>
            case PORTB: CLR_BIT(GPIOB_ODR,PinId); break;
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <GPIO_voidSetPinValue+0xf0>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	79ba      	ldrb	r2, [r7, #6]
 80003da:	2101      	movs	r1, #1
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <GPIO_voidSetPinValue+0xf0>)
 80003e6:	400b      	ands	r3, r1
 80003e8:	6013      	str	r3, [r2, #0]
 80003ea:	e00e      	b.n	800040a <GPIO_voidSetPinValue+0xe2>
            case PORTC: CLR_BIT(GPIOC_ODR,PinId); break;
 80003ec:	4b0b      	ldr	r3, [pc, #44]	; (800041c <GPIO_voidSetPinValue+0xf4>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	79ba      	ldrb	r2, [r7, #6]
 80003f2:	2101      	movs	r1, #1
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	43d2      	mvns	r2, r2
 80003fa:	4611      	mov	r1, r2
 80003fc:	4a07      	ldr	r2, [pc, #28]	; (800041c <GPIO_voidSetPinValue+0xf4>)
 80003fe:	400b      	ands	r3, r1
 8000400:	6013      	str	r3, [r2, #0]
 8000402:	e002      	b.n	800040a <GPIO_voidSetPinValue+0xe2>
	        default: break;
 8000404:	bf00      	nop
 8000406:	e000      	b.n	800040a <GPIO_voidSetPinValue+0xe2>
            default: break;
 8000408:	bf00      	nop
        }
}
	}
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	4001080c 	.word	0x4001080c
 8000418:	40010c0c 	.word	0x40010c0c
 800041c:	4001100c 	.word	0x4001100c

08000420 <RCC_VoidSysClckInit>:
#include "RCC_private.h"
#include "RCC_config.h"
#include "RCC_interface.h"


void RCC_VoidSysClckInit(){
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

#if RCC_Source==HSI
	SET_BIT(RCC_CR,0);			//HSI: ON
 8000424:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <RCC_VoidSysClckInit+0xb8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a2b      	ldr	r2, [pc, #172]	; (80004d8 <RCC_VoidSysClckInit+0xb8>)
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	6013      	str	r3, [r2, #0]
	while(!GET_BIT(RCC_CR,1));	//WAIT TO BE READY
 8000430:	bf00      	nop
 8000432:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <RCC_VoidSysClckInit+0xb8>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f9      	beq.n	8000432 <RCC_VoidSysClckInit+0x12>

	CLR_BIT(RCC_CFGR,0);
 800043e:	4b27      	ldr	r3, [pc, #156]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a26      	ldr	r2, [pc, #152]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000444:	f023 0301 	bic.w	r3, r3, #1
 8000448:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,1);		//CHOOSING HSI AS SYS CLCK
 800044a:	4b24      	ldr	r3, [pc, #144]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a23      	ldr	r2, [pc, #140]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000450:	f023 0302 	bic.w	r3, r3, #2
 8000454:	6013      	str	r3, [r2, #0]


#endif
	/*--------------------------AHB_PRESCALER------------------------*/
#if  AHB_PreScaler==0
	CLR_BIT(RCC_CFGR,4);
 8000456:	4b21      	ldr	r3, [pc, #132]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a20      	ldr	r2, [pc, #128]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 800045c:	f023 0310 	bic.w	r3, r3, #16
 8000460:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,5);
 8000462:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a1d      	ldr	r2, [pc, #116]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000468:	f023 0320 	bic.w	r3, r3, #32
 800046c:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,6);
 800046e:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a1a      	ldr	r2, [pc, #104]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000478:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,7);
 800047a:	4b18      	ldr	r3, [pc, #96]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a17      	ldr	r2, [pc, #92]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000484:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC_CFGR,6);
	SET_BIT(RCC_CFGR,7);
#endif
	/*----------------------------APB1_PRESCALER------------------------*/
#if  APB1_PreScaler==0
	CLR_BIT(RCC_CFGR,8);
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 800048c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000490:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,9);
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a11      	ldr	r2, [pc, #68]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 8000498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800049c:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,10);
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 80004a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004a8:	6013      	str	r3, [r2, #0]
#elif
	#error "Wrong APB1 prescaler entery"
#endif
	/*----------------------------APB2_PRESCALER------------------------*/
#if  APB2_PreScaler==0
	CLR_BIT(RCC_CFGR,11);
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 80004b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004b4:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,12);
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a08      	ldr	r2, [pc, #32]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 80004bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80004c0:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,13);
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a05      	ldr	r2, [pc, #20]	; (80004dc <RCC_VoidSysClckInit+0xbc>)
 80004c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004cc:	6013      	str	r3, [r2, #0]
	SET_BIT(RCC_CFGR,13);
#elif
	#error "Wrong APB2 prescaler entery"
#endif

}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40021004 	.word	0x40021004

080004e0 <RCC_VoidEnablePerClck>:

void RCC_VoidEnablePerClck(u8 BusID , u8 PerID){
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	460a      	mov	r2, r1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
	if(PerID<32){
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	2b1f      	cmp	r3, #31
 80004f4:	d82b      	bhi.n	800054e <RCC_VoidEnablePerClck+0x6e>
		switch(BusID){
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d01c      	beq.n	8000536 <RCC_VoidEnablePerClck+0x56>
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	dc25      	bgt.n	800054c <RCC_VoidEnablePerClck+0x6c>
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <RCC_VoidEnablePerClck+0x2a>
 8000504:	2b01      	cmp	r3, #1
 8000506:	d00b      	beq.n	8000520 <RCC_VoidEnablePerClck+0x40>
		case RCC_AHB:  SET_BIT(RCC_AHBENR, PerID); break;
		case RCC_APB1: SET_BIT(RCC_APB1ENR,PerID); break;
		case RCC_APB2: SET_BIT(RCC_APB2ENR,PerID); break;
		default: break;
 8000508:	e020      	b.n	800054c <RCC_VoidEnablePerClck+0x6c>
		case RCC_AHB:  SET_BIT(RCC_AHBENR, PerID); break;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <RCC_VoidEnablePerClck+0x78>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	79ba      	ldrb	r2, [r7, #6]
 8000510:	2101      	movs	r1, #1
 8000512:	fa01 f202 	lsl.w	r2, r1, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <RCC_VoidEnablePerClck+0x78>)
 800051a:	430b      	orrs	r3, r1
 800051c:	6013      	str	r3, [r2, #0]
 800051e:	e016      	b.n	800054e <RCC_VoidEnablePerClck+0x6e>
		case RCC_APB1: SET_BIT(RCC_APB1ENR,PerID); break;
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <RCC_VoidEnablePerClck+0x7c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	79ba      	ldrb	r2, [r7, #6]
 8000526:	2101      	movs	r1, #1
 8000528:	fa01 f202 	lsl.w	r2, r1, r2
 800052c:	4611      	mov	r1, r2
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <RCC_VoidEnablePerClck+0x7c>)
 8000530:	430b      	orrs	r3, r1
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	e00b      	b.n	800054e <RCC_VoidEnablePerClck+0x6e>
		case RCC_APB2: SET_BIT(RCC_APB2ENR,PerID); break;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <RCC_VoidEnablePerClck+0x7c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	79ba      	ldrb	r2, [r7, #6]
 800053c:	2101      	movs	r1, #1
 800053e:	fa01 f202 	lsl.w	r2, r1, r2
 8000542:	4611      	mov	r1, r2
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <RCC_VoidEnablePerClck+0x7c>)
 8000546:	430b      	orrs	r3, r1
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	e000      	b.n	800054e <RCC_VoidEnablePerClck+0x6e>
		default: break;
 800054c:	bf00      	nop
		}
	}
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40021014 	.word	0x40021014
 800055c:	40021018 	.word	0x40021018

08000560 <SysTick_Handler>:
void SYSTICK_SetCallback (void (*PTR) (void)){
	CallbackPtr=PTR;
}

void SysTick_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	CallbackPtr();
 8000564:	4b02      	ldr	r3, [pc, #8]	; (8000570 <SysTick_Handler+0x10>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4798      	blx	r3
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000020 	.word	0x20000020

08000574 <UART_voidinit>:

#include "UART_private.h"
#include "UART_config.h"
#include "UART_interface.h"

void UART_voidinit (){
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
#if UART_IDLEIE_ENABLE==ON
	SET_BIT(UART->USART_CR1,4);
#else
	CLR_BIT(UART->USART_CR1,4);
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <UART_voidinit+0x7c>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <UART_voidinit+0x7c>)
 800057e:	f023 0310 	bic.w	r3, r3, #16
 8000582:	60d3      	str	r3, [r2, #12]
#endif
/*************************************/
#if UART_RXNEIE_ENABLE==ON
	SET_BIT(UART->USART_CR1,5);
#else
	CLR_BIT(UART->USART_CR1,5);
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <UART_voidinit+0x7c>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	4a19      	ldr	r2, [pc, #100]	; (80005f0 <UART_voidinit+0x7c>)
 800058a:	f023 0320 	bic.w	r3, r3, #32
 800058e:	60d3      	str	r3, [r2, #12]
#endif
/*************************************/
#if UART_TCIE_ENABLE==ON
	SET_BIT(UART->USART_CR1,6);
#else
	CLR_BIT(UART->USART_CR1,6);
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <UART_voidinit+0x7c>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	4a16      	ldr	r2, [pc, #88]	; (80005f0 <UART_voidinit+0x7c>)
 8000596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800059a:	60d3      	str	r3, [r2, #12]
#endif
/*************************************/
#if UART_TXEIE_ENABLE==ON
	SET_BIT(UART->USART_CR1,7);
#else
	CLR_BIT(UART->USART_CR1,7);
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <UART_voidinit+0x7c>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <UART_voidinit+0x7c>)
 80005a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005a6:	60d3      	str	r3, [r2, #12]
#endif
/*************************************/
#if UART_PEIE_ENABLE==ON
	SET_BIT(UART->USART_CR1,8);
#else
	CLR_BIT(UART->USART_CR1,8);
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <UART_voidinit+0x7c>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <UART_voidinit+0x7c>)
 80005ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005b2:	60d3      	str	r3, [r2, #12]
		SET_BIT(UART->USART_CR1,9);
	#elif UART_PARITY_MODE==EVEN
		CLR_BIT(UART->USART_CR1,9);
	#endif
#else
	CLR_BIT(UART->USART_CR1,10);
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <UART_voidinit+0x7c>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <UART_voidinit+0x7c>)
 80005ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005be:	60d3      	str	r3, [r2, #12]
#endif
/*************************************/
//UART->USART_BRR=1;					//FRACTION
//
//UART->USART_BRR |= 52<<4;			    //MANSIETA
	UART->USART_BRR =0x341;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <UART_voidinit+0x7c>)
 80005c2:	f240 3241 	movw	r2, #833	; 0x341
 80005c6:	609a      	str	r2, [r3, #8]
/*************************************/

	CLR_BIT(UART->USART_CR1,12);        //Word_length
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <UART_voidinit+0x7c>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <UART_voidinit+0x7c>)
 80005ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80005d2:	60d3      	str	r3, [r2, #12]

	SET_BIT(UART->USART_CR1,13);		//ENABLE UART
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <UART_voidinit+0x7c>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <UART_voidinit+0x7c>)
 80005da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005de:	60d3      	str	r3, [r2, #12]

	UART->USART_SR=0;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <UART_voidinit+0x7c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40013800 	.word	0x40013800

080005f4 <UART_voidTxEnable>:

void UART_voidTxEnable(){
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	SET_BIT(UART->USART_CR1,3);
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <UART_voidTxEnable+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <UART_voidTxEnable+0x18>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40013800 	.word	0x40013800

08000610 <UART_voidRxEnable>:
void UART_voidTxDisable(){
	CLR_BIT(UART->USART_CR1,3);
}

void UART_voidRxEnable(){
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	SET_BIT(UART->USART_CR1,2);
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <UART_voidRxEnable+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <UART_voidRxEnable+0x18>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	40013800 	.word	0x40013800

0800062c <UART_voidSendString>:
void UART_voidRxDisable(){
	CLR_BIT(UART->USART_CR1,2);
}

void UART_voidSendString(u32 str){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	UART->USART_DR=str;
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <UART_voidSendString+0x28>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6053      	str	r3, [r2, #4]
	while(!GET_BIT(UART->USART_SR,6));
 800063a:	bf00      	nop
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <UART_voidSendString+0x28>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0f9      	beq.n	800063c <UART_voidSendString+0x10>
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40013800 	.word	0x40013800

08000658 <UART_RecieveString>:
u8 UART_RecieveString(){
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
	u8 Local_Reading=0;
 800065e:	2300      	movs	r3, #0
 8000660:	71fb      	strb	r3, [r7, #7]
	while(!GET_BIT(UART->USART_SR,5));
 8000662:	bf00      	nop
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <UART_RecieveString+0x2c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f003 0320 	and.w	r3, r3, #32
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f9      	beq.n	8000664 <UART_RecieveString+0xc>

	Local_Reading=UART->USART_DR;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <UART_RecieveString+0x2c>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	71fb      	strb	r3, [r7, #7]
	return Local_Reading;
 8000676:	79fb      	ldrb	r3, [r7, #7]
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40013800 	.word	0x40013800

08000688 <_delay_ms>:
#ifndef STD_FUNCTIONS_H_
#define STD_FUNCTIONS_H_


//Delay function works efficiently with 8MHz
void _delay_ms(u32 ticks){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	for(int i=0;i<ticks*500;i++){
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	e003      	b.n	800069e <_delay_ms+0x16>
		asm("NOP");
 8000696:	bf00      	nop
	for(int i=0;i<ticks*500;i++){
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006a4:	fb03 f202 	mul.w	r2, r3, r2
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d8f3      	bhi.n	8000696 <_delay_ms+0xe>
	}
}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
	...

080006bc <main>:
#include "DMA_interface.h"
#include "UART_interface.h"

static u8 reading=0;

int main (){
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

RCC_VoidSysClckInit();
 80006c0:	f7ff feae 	bl	8000420 <RCC_VoidSysClckInit>
RCC_VoidEnablePerClck(RCC_APB2, 14);
 80006c4:	210e      	movs	r1, #14
 80006c6:	2002      	movs	r0, #2
 80006c8:	f7ff ff0a 	bl	80004e0 <RCC_VoidEnablePerClck>
RCC_VoidEnablePerClck(RCC_APB2, 2);
 80006cc:	2102      	movs	r1, #2
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff ff06 	bl	80004e0 <RCC_VoidEnablePerClck>

GPIO_voidSetPinDirection(PORTA,9, GPIO_OUTPUT_2MHZ_AFPP);
 80006d4:	220a      	movs	r2, #10
 80006d6:	2109      	movs	r1, #9
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff fd57 	bl	800018c <GPIO_voidSetPinDirection>
GPIO_voidSetPinDirection(PORTA,10,GPIO_INPUT_FLOATING);
 80006de:	2204      	movs	r2, #4
 80006e0:	210a      	movs	r1, #10
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff fd52 	bl	800018c <GPIO_voidSetPinDirection>

GPIO_voidSetPinDirection(PORTA, 1, GPIO_OUTPUT_2MHZ_PP);
 80006e8:	2202      	movs	r2, #2
 80006ea:	2101      	movs	r1, #1
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff fd4d 	bl	800018c <GPIO_voidSetPinDirection>


UART_voidinit();
 80006f2:	f7ff ff3f 	bl	8000574 <UART_voidinit>
UART_voidTxEnable();
 80006f6:	f7ff ff7d 	bl	80005f4 <UART_voidTxEnable>
UART_voidRxEnable();
 80006fa:	f7ff ff89 	bl	8000610 <UART_voidRxEnable>

UART_voidSendString('6');
 80006fe:	2036      	movs	r0, #54	; 0x36
 8000700:	f7ff ff94 	bl	800062c <UART_voidSendString>
_delay_ms(1000);
 8000704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000708:	f7ff ffbe 	bl	8000688 <_delay_ms>
reading=UART_RecieveString();
 800070c:	f7ff ffa4 	bl	8000658 <UART_RecieveString>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <main+0x80>)
 8000716:	701a      	strb	r2, [r3, #0]
_delay_ms(1000);
 8000718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071c:	f7ff ffb4 	bl	8000688 <_delay_ms>


while(1){
if(reading=='6'){
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <main+0x80>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b36      	cmp	r3, #54	; 0x36
 8000726:	d1fb      	bne.n	8000720 <main+0x64>
	GPIO_voidSetPinValue(PORTA,1,GPIO_HIGH);
 8000728:	2201      	movs	r2, #1
 800072a:	2101      	movs	r1, #1
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff fdfb 	bl	8000328 <GPIO_voidSetPinValue>
	_delay_ms(5000);
 8000732:	f241 3088 	movw	r0, #5000	; 0x1388
 8000736:	f7ff ffa7 	bl	8000688 <_delay_ms>
if(reading=='6'){
 800073a:	e7f1      	b.n	8000720 <main+0x64>
 800073c:	20000024 	.word	0x20000024

08000740 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000742:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000744:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490d      	ldr	r1, [pc, #52]	; (8000780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0a      	ldr	r4, [pc, #40]	; (800078c <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800076e:	f000 f811 	bl	8000794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000772:	f7ff ffa3 	bl	80006bc <main>

08000776 <LoopForever>:

LoopForever:
  b LoopForever
 8000776:	e7fe      	b.n	8000776 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8000778:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000784:	080007fc 	.word	0x080007fc
  ldr r2, =_sbss
 8000788:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800078c:	20000028 	.word	0x20000028

08000790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC1_2_IRQHandler>
	...

08000794 <__libc_init_array>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	2600      	movs	r6, #0
 8000798:	4d0c      	ldr	r5, [pc, #48]	; (80007cc <__libc_init_array+0x38>)
 800079a:	4c0d      	ldr	r4, [pc, #52]	; (80007d0 <__libc_init_array+0x3c>)
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	10a4      	asrs	r4, r4, #2
 80007a0:	42a6      	cmp	r6, r4
 80007a2:	d109      	bne.n	80007b8 <__libc_init_array+0x24>
 80007a4:	f000 f81a 	bl	80007dc <_init>
 80007a8:	2600      	movs	r6, #0
 80007aa:	4d0a      	ldr	r5, [pc, #40]	; (80007d4 <__libc_init_array+0x40>)
 80007ac:	4c0a      	ldr	r4, [pc, #40]	; (80007d8 <__libc_init_array+0x44>)
 80007ae:	1b64      	subs	r4, r4, r5
 80007b0:	10a4      	asrs	r4, r4, #2
 80007b2:	42a6      	cmp	r6, r4
 80007b4:	d105      	bne.n	80007c2 <__libc_init_array+0x2e>
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007bc:	4798      	blx	r3
 80007be:	3601      	adds	r6, #1
 80007c0:	e7ee      	b.n	80007a0 <__libc_init_array+0xc>
 80007c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c6:	4798      	blx	r3
 80007c8:	3601      	adds	r6, #1
 80007ca:	e7f2      	b.n	80007b2 <__libc_init_array+0x1e>
 80007cc:	080007f4 	.word	0x080007f4
 80007d0:	080007f4 	.word	0x080007f4
 80007d4:	080007f4 	.word	0x080007f4
 80007d8:	080007f8 	.word	0x080007f8

080007dc <_init>:
 80007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007de:	bf00      	nop
 80007e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007e2:	bc08      	pop	{r3}
 80007e4:	469e      	mov	lr, r3
 80007e6:	4770      	bx	lr

080007e8 <_fini>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	bf00      	nop
 80007ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ee:	bc08      	pop	{r3}
 80007f0:	469e      	mov	lr, r3
 80007f2:	4770      	bx	lr
